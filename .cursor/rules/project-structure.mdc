---
description: 
globs: 
alwaysApply: true
---
---
description:
globs:
alwaysApply: true
---
# Page UI Project Structure

This rule outlines the directory structure and organization of the rayces-v3 project


## Full Stack Root Directory Structure

```
rayces-v3/
â”œâ”€â”€ k8s/          # Kubernetes / skaffold manifests 
â”œâ”€â”€ nextjs/            # full UI using Next.js app
â”œâ”€â”€ rails-api/          # ðŸ“„ Complete backend solution used on API mode only. (no ui views)
â””â”€â”€ skaffold.yaml        # Skaffold application yaml for k8s cluster assisted development
```

## Components Directory (`/nextjs`)

**Purpose**: Host complete UI application.

# NextJS Project Structure

```
nextjs/
â”œâ”€â”€ package.json                 # Project dependencies and scripts
â”œâ”€â”€ yarn.lock                    # Locked dependency versions
â”œâ”€â”€ tailwind.config.ts           # Tailwind CSS configuration
â”œâ”€â”€ tsconfig.json                # TypeScript configuration
â”œâ”€â”€ postcss.config.mjs           # PostCSS configuration
â”œâ”€â”€ next.config.mjs              # Next.js configuration
â”œâ”€â”€ Dockerfile                   # Docker container configuration
â”œâ”€â”€ docker-compose.yml           # Docker Compose services
â”œâ”€â”€ README.md                    # Project documentation
â”œâ”€â”€ .dockerignore                # Docker ignore patterns
â”œâ”€â”€ .gitignore                   # Git ignore patterns
â”œâ”€â”€ .tool-versions               # Tool version specifications
â”œâ”€â”€ next-env.d.ts                # Next.js TypeScript declarations
â”œâ”€â”€ tsconfig.tsbuildinfo         # TypeScript build info cache
â”œâ”€â”€ .next/                       # Next.js build output (generated)
â”œâ”€â”€ node_modules/                # Dependencies (generated)
â”œâ”€â”€ types/
â”‚   â””â”€â”€ next-auth.d.ts          # NextAuth.js type declarations
â”œâ”€â”€ public/
â”‚   â”œâ”€â”€ assets/
â”‚   â”‚   â”œâ”€â”€ loader.gif          # Loading animation
â”‚   â”‚   â”œâ”€â”€ MyHub_icon.png      # MyHub application icon
â”‚   â”‚   â””â”€â”€ please_login.png    # Login prompt image
â”‚   â”œâ”€â”€ next.svg                # Next.js logo
â”‚   â””â”€â”€ vercel.svg              # Vercel logo
â””â”€â”€ src/
    â””â”€â”€ app/                     # Next.js 13+ App Router
        â”œâ”€â”€ globals.css          # Global styles
        â”œâ”€â”€ layout.tsx           # Root layout component
        â”œâ”€â”€ page.tsx             # Home page component
        â”œâ”€â”€ favicon.ico          # Site favicon
        â”œâ”€â”€ components/          # Reusable UI components
        â”‚   â”œâ”€â”€ Feed.tsx         # Feed component for posts
        â”‚   â”œâ”€â”€ IconActions.tsx  # Icon action buttons
        â”‚   â”œâ”€â”€ Input.tsx        # Input form component
        â”‚   â”œâ”€â”€ News.tsx         # News/announcements component
        â”‚   â”œâ”€â”€ Post.tsx         # Individual post component
        â”‚   â”œâ”€â”€ ServerLive.tsx   # Server status indicator
        â”‚   â”œâ”€â”€ SessionWrapper.tsx # Session management wrapper
        â”‚   â””â”€â”€ Sidebar.tsx      # Sidebar navigation
        â”œâ”€â”€ posts/               # Posts-related pages
        â”‚   â””â”€â”€ [id]/            # Dynamic post ID route
        â”‚       â””â”€â”€ page.tsx     # Individual post page
        â””â”€â”€ api/                 # API routes
            â”œâ”€â”€ auth/            # Authentication API
            â”‚   â””â”€â”€ [...nextauth]/ # NextAuth.js catch-all route
            â”‚       â””â”€â”€ route.js # NextAuth.js configuration
            â””â”€â”€ rails-app/       # Rails API integration
                â””â”€â”€ api.ts       # Rails API client utilities
```

## Key Features

- **Next.js 13+ App Router**: Uses the modern App Router for file-based routing
- **TypeScript**: Full TypeScript support with proper type definitions
- **Tailwind CSS**: Utility-first CSS framework for styling
- **NextAuth.js**: Authentication system integration
- **Docker Support**: Containerized deployment with Docker and Docker Compose
- **Rails API Integration**: Backend API communication utilities
- **Component Architecture**: Modular, reusable React components
- **Dynamic Routing**: Support for dynamic post pages with `[id]` parameter

## Component Structure

The application follows a modular component architecture with:
- **Layout Components**: `layout.tsx` for overall page structure
- **Page Components**: `page.tsx` files for specific routes
- **UI Components**: Reusable components in `/components/` directory
- **API Routes**: Backend communication in `/api/` directory

## Asset Management

Static assets are organized in `/public/assets/` with:
- Application branding (logos, icons)
- UI elements (loader animations)
- User interface graphics


## Kubernetes (K8s) Project Structure Directory (`/k8s/`)

**Purpose**: Full k8s manifests.

```
k8s/
â”œâ”€â”€ namespace.yaml                    # Kubernetes namespace definition
â”œâ”€â”€ kustomization.yaml                # Kustomize configuration for resource management
â”œâ”€â”€ dot.env-example                   # Environment variables template
â”œâ”€â”€ storage.yaml                      # Persistent volume storage configuration
â”œâ”€â”€ backend-deployment.yaml           # Rails API backend deployment
â”œâ”€â”€ backend-service.yaml              # Rails API backend service
â”œâ”€â”€ frontend-deployment.yaml          # NextJS frontend deployment
â”œâ”€â”€ frontend-service.yaml             # NextJS frontend service
â”œâ”€â”€ postgres-deployment.yaml          # PostgreSQL database deployment
â”œâ”€â”€ postgres-service.yaml             # PostgreSQL database service
â””â”€â”€ rails-seeding-job-run-only-once.yaml # Database seeding job (one-time execution)
```

## Infrastructure Components

### **Core Services**
- **Backend (Rails API)**: RESTful API service for business logic
- **Frontend (NextJS)**: React-based web application
- **Database (PostgreSQL)**: Relational database for data persistence

### **Kubernetes Resources**

#### **Deployments**
- `backend-deployment.yaml`: Rails API application deployment
- `frontend-deployment.yaml`: NextJS frontend application deployment
- `postgres-deployment.yaml`: PostgreSQL database deployment

#### **Services**
- `backend-service.yaml`: Exposes Rails API internally
- `frontend-service.yaml`: Exposes NextJS frontend internally
- `postgres-service.yaml`: Exposes PostgreSQL database internally

#### **Storage & Configuration**
- `storage.yaml`: Persistent volume claims for data storage
- `namespace.yaml`: Isolated namespace for the application
- `dot.env-example`: Environment variables template for configuration

#### **Jobs**
- `rails-seeding-job-run-only-once.yaml`: Database seeding job for initial data

#### **Management**
- `kustomization.yaml`: Kustomize configuration for resource orchestration

## Architecture Overview

The Kubernetes setup follows a microservices architecture with:

1. **Frontend Layer**: NextJS application serving the user interface
2. **Backend Layer**: Rails API handling business logic and data processing
3. **Data Layer**: PostgreSQL database for persistent data storage
4. **Infrastructure Layer**: Kubernetes resources for orchestration and scaling

## Deployment Strategy

- **Stateless Applications**: Frontend and backend are deployed as stateless services
- **Stateful Database**: PostgreSQL uses persistent storage for data durability
- **One-time Jobs**: Database seeding runs once during initial setup
- **Service Discovery**: Internal services communicate via Kubernetes service names
- **Resource Management**: Kustomize manages resource configurations and overlays

## Key Features

- **Namespace Isolation**: All resources run in a dedicated namespace
- **Persistent Storage**: Database data persists across pod restarts
- **Service Mesh**: Internal service communication via Kubernetes services
- **Configuration Management**: Environment-based configuration via ConfigMaps/Secrets
- **Resource Orchestration**: Kustomize for managing multiple environments

## Rails-api Directory  (`/rails-api/`)

**Purpose**: full backend solution

# Rails API Project Structure

```
rails-api/
â”œâ”€â”€ Dockerfile                        # Docker container configuration
â”œâ”€â”€ docker-compose.yml                # Docker Compose services
â”œâ”€â”€ entrypoint.sh                     # Docker container entrypoint script
â”œâ”€â”€ Gemfile                           # Ruby dependencies specification
â”œâ”€â”€ Gemfile.lock                      # Locked gem versions
â”œâ”€â”€ Rakefile                          # Rake task definitions
â”œâ”€â”€ config.ru                         # Rack configuration
â”œâ”€â”€ .dockerignore                     # Docker ignore patterns
â”œâ”€â”€ .gitattributes                    # Git attributes configuration
â”œâ”€â”€ .gitignore                        # Git ignore patterns
â”œâ”€â”€ .rspec                            # RSpec configuration
â”œâ”€â”€ .ruby-version                     # Ruby version specification
â”œâ”€â”€ bin/                              # Executable scripts
â”‚   â”œâ”€â”€ docker-entrypoint             # Docker container startup script
â”‚   â”œâ”€â”€ rails                         # Rails command line tool
â”‚   â”œâ”€â”€ rake                          # Rake task runner
â”‚   â””â”€â”€ setup                         # Application setup script
â”œâ”€â”€ config/                           # Application configuration
â”‚   â”œâ”€â”€ application.rb                # Main application configuration
â”‚   â”œâ”€â”€ boot.rb                       # Application bootstrapping
â”‚   â”œâ”€â”€ environment.rb                # Environment-specific configuration
â”‚   â”œâ”€â”€ database.yml                  # Database configuration
â”‚   â”œâ”€â”€ credentials.yml.enc           # Encrypted credentials
â”‚   â”œâ”€â”€ storage.yml                   # Active Storage configuration
â”‚   â”œâ”€â”€ cable.yml                     # Action Cable configuration
â”‚   â”œâ”€â”€ puma.rb                       # Puma web server configuration
â”‚   â”œâ”€â”€ routes.rb                     # Application routes
â”‚   â”œâ”€â”€ initializers/                 # Application initializers
â”‚   â”‚   â”œâ”€â”€ cors.rb                   # CORS configuration
â”‚   â”‚   â”œâ”€â”€ filter_parameter_logging.rb # Parameter filtering
â”‚   â”‚   â””â”€â”€ inflections.rb            # Custom inflections
â”‚   â”œâ”€â”€ environments/                 # Environment-specific configs
â”‚   â”‚   â”œâ”€â”€ development.rb            # Development environment
â”‚   â”‚   â”œâ”€â”€ production.rb             # Production environment
â”‚   â”‚   â””â”€â”€ test.rb                   # Test environment
â”‚   â””â”€â”€ locales/                      # Internationalization files
â”œâ”€â”€ db/                               # Database files
â”‚   â”œâ”€â”€ migrate/                      # Database migrations
â”‚   â”‚   â”œâ”€â”€ 20240602194839_create_users.rb
â”‚   â”‚   â”œâ”€â”€ 20240603154549_create_posts.rb
â”‚   â”‚   â””â”€â”€ 20240606034427_create_likes.rb
â”‚   â”œâ”€â”€ schema.rb                     # Database schema
â”‚   â”œâ”€â”€ seeds.rb                      # Database seeding
â”‚   â””â”€â”€ post_seeds.csv                # CSV data for seeding
â”œâ”€â”€ app/                              # Application code
â”‚   â”œâ”€â”€ controllers/                  # Controller classes
â”‚   â”‚   â”œâ”€â”€ application_controller.rb # Base controller
â”‚   â”‚   â”œâ”€â”€ welcome_controller.rb     # Welcome page controller
â”‚   â”‚   â”œâ”€â”€ users_controller.rb       # User management
â”‚   â”‚   â”œâ”€â”€ posts_controller.rb       # Post management
â”‚   â”‚   â”œâ”€â”€ likes_controller.rb       # Like management
â”‚   â”‚   â”œâ”€â”€ concerns/                 # Controller concerns
â”‚   â”‚   â””â”€â”€ api/                      # API controllers
â”‚   â”‚       â””â”€â”€ v1/                   # API version 1
â”‚   â”‚           â””â”€â”€ test_controller.rb # API test endpoint
â”‚   â”œâ”€â”€ models/                       # Model classes
â”‚   â”‚   â”œâ”€â”€ application_record.rb     # Base model
â”‚   â”‚   â”œâ”€â”€ user.rb                   # User model
â”‚   â”‚   â”œâ”€â”€ post.rb                   # Post model
â”‚   â”‚   â”œâ”€â”€ like.rb                   # Like model
â”‚   â”‚   â””â”€â”€ concerns/                 # Model concerns
â”‚   â”œâ”€â”€ middleware/                   # Custom middleware
â”‚   â”‚   â””â”€â”€ google_token_verifier.rb  # Google token verification
â”‚   â”œâ”€â”€ jobs/                         # Background jobs
â”‚   â”‚   â””â”€â”€ application_job.rb        # Base job class
â”‚   â”œâ”€â”€ mailers/                      # Mailer classes
â”‚   â”‚   â””â”€â”€ application_mailer.rb     # Base mailer
â”‚   â”œâ”€â”€ views/                        # View templates
â”‚   â”‚   â””â”€â”€ layouts/                  # Layout templates
â”‚   â”‚       â”œâ”€â”€ mailer.html.erb       # HTML mailer layout
â”‚   â”‚       â””â”€â”€ mailer.text.erb       # Text mailer layout
â”‚   â””â”€â”€ channels/                     # Action Cable channels
â”‚       â””â”€â”€ application_cable/        # Base cable classes
â”‚           â”œâ”€â”€ channel.rb            # Base channel
â”‚           â””â”€â”€ connection.rb         # Base connection
â”œâ”€â”€ lib/                              # Library code
â”‚   â””â”€â”€ tasks/                        # Custom Rake tasks
â”‚       â””â”€â”€ .keep                     # Placeholder file
â”œâ”€â”€ spec/                             # RSpec test files
â”‚   â”œâ”€â”€ spec_helper.rb                # RSpec configuration
â”‚   â”œâ”€â”€ rails_helper.rb               # Rails-specific RSpec config
â”‚   â”œâ”€â”€ requests/                     # Request specs
â”‚   â”‚   â”œâ”€â”€ posts_spec.rb             # Posts API tests
â”‚   â”‚   â””â”€â”€ users_spec.rb             # Users API tests
â”‚   â”œâ”€â”€ controllers/                  # Controller specs
â”‚   â”‚   â””â”€â”€ users_controller_spec.rb  # Users controller tests
â”‚   â”œâ”€â”€ models/                       # Model specs
â”‚   â”‚   â””â”€â”€ post_spec.rb              # Post model tests
â”‚   â”œâ”€â”€ middleware/                   # Middleware specs
â”‚   â”‚   â””â”€â”€ google_token_verifier_spec.rb # Token verifier tests
â”‚   â””â”€â”€ factories/                    # Factory definitions
â”‚       â””â”€â”€ posts.rb                  # Post factories
â”œâ”€â”€ test/                             # Test files (alternative to RSpec)
â”‚   â”œâ”€â”€ test_helper.rb                # Test configuration
â”‚   â”œâ”€â”€ controllers/                  # Controller tests
â”‚   â”œâ”€â”€ models/                       # Model tests
â”‚   â”œâ”€â”€ integration/                  # Integration tests
â”‚   â”œâ”€â”€ fixtures/                     # Test fixtures
â”‚   â””â”€â”€ channels/                     # Channel tests
â”œâ”€â”€ public/                           # Public assets
â”‚   â””â”€â”€ robots.txt                    # Robots exclusion file
â”œâ”€â”€ storage/                          # Active Storage files
â”œâ”€â”€ tmp/                              # Temporary files
â”œâ”€â”€ log/                              # Application logs
â””â”€â”€ vendor/                           # Vendor dependencies
```

## Application Architecture

### **Core Components**
- **API-First Design**: RESTful API endpoints for frontend consumption
- **Authentication**: Google token verification middleware
- **Database**: PostgreSQL with Active Record ORM
- **Testing**: RSpec for comprehensive test coverage

### **Key Models**
- **User**: User management and authentication
- **Post**: Content management system
- **Like**: Social interaction functionality

### **API Structure**
- **Versioned API**: `/api/v1/` namespace for API versioning
- **RESTful Controllers**: Standard CRUD operations
- **CORS Support**: Cross-origin resource sharing enabled

## Development Features

### **Testing Strategy**
- **Request Specs**: API endpoint testing
- **Controller Specs**: Controller behavior testing
- **Model Specs**: Model validation and business logic
- **Middleware Specs**: Custom middleware testing
- **Factories**: Test data generation

### **Configuration Management**
- **Environment-Specific**: Separate configs for dev/test/prod
- **Encrypted Credentials**: Secure credential management
- **Database Migrations**: Version-controlled schema changes
- **CORS Configuration**: Cross-origin request handling

### **Docker Support**
- **Containerized**: Full Docker support with docker-compose
- **Entrypoint Scripts**: Automated container startup
- **Multi-stage Builds**: Optimized container images

## Key Features

- **RESTful API**: Clean, RESTful API design
- **Authentication**: Google OAuth integration
- **Database Seeding**: Automated data population
- **Background Jobs**: Asynchronous task processing
- **Real-time Features**: Action Cable for WebSocket support
- **Comprehensive Testing**: Full test coverage with RSpec
- **Production Ready**: Optimized for production deployment

